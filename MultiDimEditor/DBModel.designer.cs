#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MultiDimEditor
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="coursework")]
	public partial class DBModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertSpaces(Spaces instance);
    partial void UpdateSpaces(Spaces instance);
    partial void DeleteSpaces(Spaces instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertViews(Views instance);
    partial void UpdateViews(Views instance);
    partial void DeleteViews(Views instance);
    #endregion
		
		public DBModelDataContext() : 
				base(global::MultiDimEditor.Properties.Settings.Default.courseworkConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Spaces> Spaces
		{
			get
			{
				return this.GetTable<Spaces>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<Views> Views
		{
			get
			{
				return this.GetTable<Views>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Spaces")]
	public partial class Spaces : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _SPACE_ID;
		
		private string _Name;
		
		private string _Content;
		
		private System.Guid _CreatorID;
		
		private string _EditorPassword;
		
		private string _FreePassword;
		
		private string _LockedPassword;
		
		private System.Nullable<System.DateTime> _Last_OpenEdit;
		
		private EntitySet<Views> _Views;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSPACE_IDChanging(System.Guid value);
    partial void OnSPACE_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnContentChanging(string value);
    partial void OnContentChanged();
    partial void OnCreatorIDChanging(System.Guid value);
    partial void OnCreatorIDChanged();
    partial void OnEditorPasswordChanging(string value);
    partial void OnEditorPasswordChanged();
    partial void OnFreePasswordChanging(string value);
    partial void OnFreePasswordChanged();
    partial void OnLockedPasswordChanging(string value);
    partial void OnLockedPasswordChanged();
    partial void OnLast_OpenEditChanging(System.Nullable<System.DateTime> value);
    partial void OnLast_OpenEditChanged();
    #endregion
		
		public Spaces()
		{
			this._Views = new EntitySet<Views>(new Action<Views>(this.attach_Views), new Action<Views>(this.detach_Views));
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SPACE_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid SPACE_ID
		{
			get
			{
				return this._SPACE_ID;
			}
			set
			{
				if ((this._SPACE_ID != value))
				{
					this.OnSPACE_IDChanging(value);
					this.SendPropertyChanging();
					this._SPACE_ID = value;
					this.SendPropertyChanged("SPACE_ID");
					this.OnSPACE_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Content", DbType="VarChar(MAX)")]
		public string Content
		{
			get
			{
				return this._Content;
			}
			set
			{
				if ((this._Content != value))
				{
					this.OnContentChanging(value);
					this.SendPropertyChanging();
					this._Content = value;
					this.SendPropertyChanged("Content");
					this.OnContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatorID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid CreatorID
		{
			get
			{
				return this._CreatorID;
			}
			set
			{
				if ((this._CreatorID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorIDChanging(value);
					this.SendPropertyChanging();
					this._CreatorID = value;
					this.SendPropertyChanged("CreatorID");
					this.OnCreatorIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EditorPassword", DbType="VarChar(50)")]
		public string EditorPassword
		{
			get
			{
				return this._EditorPassword;
			}
			set
			{
				if ((this._EditorPassword != value))
				{
					this.OnEditorPasswordChanging(value);
					this.SendPropertyChanging();
					this._EditorPassword = value;
					this.SendPropertyChanged("EditorPassword");
					this.OnEditorPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FreePassword", DbType="VarChar(50)")]
		public string FreePassword
		{
			get
			{
				return this._FreePassword;
			}
			set
			{
				if ((this._FreePassword != value))
				{
					this.OnFreePasswordChanging(value);
					this.SendPropertyChanging();
					this._FreePassword = value;
					this.SendPropertyChanged("FreePassword");
					this.OnFreePasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockedPassword", DbType="VarChar(50)")]
		public string LockedPassword
		{
			get
			{
				return this._LockedPassword;
			}
			set
			{
				if ((this._LockedPassword != value))
				{
					this.OnLockedPasswordChanging(value);
					this.SendPropertyChanging();
					this._LockedPassword = value;
					this.SendPropertyChanged("LockedPassword");
					this.OnLockedPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_OpenEdit", DbType="DateTime")]
		public System.Nullable<System.DateTime> Last_OpenEdit
		{
			get
			{
				return this._Last_OpenEdit;
			}
			set
			{
				if ((this._Last_OpenEdit != value))
				{
					this.OnLast_OpenEditChanging(value);
					this.SendPropertyChanging();
					this._Last_OpenEdit = value;
					this.SendPropertyChanged("Last_OpenEdit");
					this.OnLast_OpenEditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Spaces_Views", Storage="_Views", ThisKey="SPACE_ID", OtherKey="SpaceID")]
		public EntitySet<Views> Views
		{
			get
			{
				return this._Views;
			}
			set
			{
				this._Views.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Spaces", Storage="_Users", ThisKey="CreatorID", OtherKey="USER_ID", IsForeignKey=true)]
		public Users Creator
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Spaces.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Spaces.Add(this);
						this._CreatorID = value.USER_ID;
					}
					else
					{
						this._CreatorID = default(System.Guid);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Views(Views entity)
		{
			this.SendPropertyChanging();
			entity.Space = this;
		}
		
		private void detach_Views(Views entity)
		{
			this.SendPropertyChanging();
			entity.Space = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _USER_ID;
		
		private string _Name;
		
		private string _Password;
		
		private int _Access_type;
		
		private System.Nullable<System.DateTime> _Login_time;
		
		private EntitySet<Spaces> _Spaces;
		
		private EntitySet<Views> _Views;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUSER_IDChanging(System.Guid value);
    partial void OnUSER_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAccess_typeChanging(int value);
    partial void OnAccess_typeChanged();
    partial void OnLogin_timeChanging(System.Nullable<System.DateTime> value);
    partial void OnLogin_timeChanged();
    #endregion
		
		public Users()
		{
			this._Spaces = new EntitySet<Spaces>(new Action<Spaces>(this.attach_Spaces), new Action<Spaces>(this.detach_Spaces));
			this._Views = new EntitySet<Views>(new Action<Views>(this.attach_Views), new Action<Views>(this.detach_Views));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_USER_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid USER_ID
		{
			get
			{
				return this._USER_ID;
			}
			set
			{
				if ((this._USER_ID != value))
				{
					this.OnUSER_IDChanging(value);
					this.SendPropertyChanging();
					this._USER_ID = value;
					this.SendPropertyChanged("USER_ID");
					this.OnUSER_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Access_type", DbType="Int NOT NULL")]
		public int Access_type
		{
			get
			{
				return this._Access_type;
			}
			set
			{
				if ((this._Access_type != value))
				{
					this.OnAccess_typeChanging(value);
					this.SendPropertyChanging();
					this._Access_type = value;
					this.SendPropertyChanged("Access_type");
					this.OnAccess_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login_time", DbType="DateTime")]
		public System.Nullable<System.DateTime> Login_time
		{
			get
			{
				return this._Login_time;
			}
			set
			{
				if ((this._Login_time != value))
				{
					this.OnLogin_timeChanging(value);
					this.SendPropertyChanging();
					this._Login_time = value;
					this.SendPropertyChanged("Login_time");
					this.OnLogin_timeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Spaces", Storage="_Spaces", ThisKey="USER_ID", OtherKey="CreatorID")]
		public EntitySet<Spaces> Spaces
		{
			get
			{
				return this._Spaces;
			}
			set
			{
				this._Spaces.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Views", Storage="_Views", ThisKey="USER_ID", OtherKey="UserID")]
		public EntitySet<Views> Views
		{
			get
			{
				return this._Views;
			}
			set
			{
				this._Views.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Spaces(Spaces entity)
		{
			this.SendPropertyChanging();
			entity.Creator = this;
		}
		
		private void detach_Spaces(Spaces entity)
		{
			this.SendPropertyChanging();
			entity.Creator = null;
		}
		
		private void attach_Views(Views entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Views(Views entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Views")]
	public partial class Views : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _VIEW_ID;
		
		private string _Name;
		
		private System.Guid _SpaceID;
		
		private System.Guid _UserID;
		
		private string _Transform;
		
		private int _Access_type;
		
		private EntityRef<Spaces> _Spaces;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVIEW_IDChanging(System.Guid value);
    partial void OnVIEW_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSpaceIDChanging(System.Guid value);
    partial void OnSpaceIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnTransformChanging(string value);
    partial void OnTransformChanged();
    partial void OnAccess_typeChanging(int value);
    partial void OnAccess_typeChanged();
    #endregion
		
		public Views()
		{
			this._Spaces = default(EntityRef<Spaces>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VIEW_ID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid VIEW_ID
		{
			get
			{
				return this._VIEW_ID;
			}
			set
			{
				if ((this._VIEW_ID != value))
				{
					this.OnVIEW_IDChanging(value);
					this.SendPropertyChanging();
					this._VIEW_ID = value;
					this.SendPropertyChanged("VIEW_ID");
					this.OnVIEW_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpaceID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SpaceID
		{
			get
			{
				return this._SpaceID;
			}
			set
			{
				if ((this._SpaceID != value))
				{
					if (this._Spaces.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpaceIDChanging(value);
					this.SendPropertyChanging();
					this._SpaceID = value;
					this.SendPropertyChanged("SpaceID");
					this.OnSpaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Transform", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Transform
		{
			get
			{
				return this._Transform;
			}
			set
			{
				if ((this._Transform != value))
				{
					this.OnTransformChanging(value);
					this.SendPropertyChanging();
					this._Transform = value;
					this.SendPropertyChanged("Transform");
					this.OnTransformChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Access_type", DbType="Int NOT NULL")]
		public int Access_type
		{
			get
			{
				return this._Access_type;
			}
			set
			{
				if ((this._Access_type != value))
				{
					this.OnAccess_typeChanging(value);
					this.SendPropertyChanging();
					this._Access_type = value;
					this.SendPropertyChanged("Access_type");
					this.OnAccess_typeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Spaces_Views", Storage="_Spaces", ThisKey="SpaceID", OtherKey="SPACE_ID", IsForeignKey=true)]
		public Spaces Space
		{
			get
			{
				return this._Spaces.Entity;
			}
			set
			{
				Spaces previousValue = this._Spaces.Entity;
				if (((previousValue != value) 
							|| (this._Spaces.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Spaces.Entity = null;
						previousValue.Views.Remove(this);
					}
					this._Spaces.Entity = value;
					if ((value != null))
					{
						value.Views.Add(this);
						this._SpaceID = value.SPACE_ID;
					}
					else
					{
						this._SpaceID = default(System.Guid);
					}
					this.SendPropertyChanged("Spaces");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Views", Storage="_Users", ThisKey="UserID", OtherKey="USER_ID", IsForeignKey=true)]
		public Users Owner
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Views.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Views.Add(this);
						this._UserID = value.USER_ID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
